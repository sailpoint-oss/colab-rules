<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule name="UsernameGenerator" type="AttributeGenerator">
    <Description>Generate a unique username for Active Directory.</Description>
    <Signature returnType="Object">
        <Inputs>
            <Argument name="idn" type="IdnRuleUtil">
                <Description>
                    Provides a read-only starting point for using the SailPoint API. From this
                    passed reference, the rule can interrogate the IdentityNow data model including
                    identities or account information via helper methods as described in
                    IdnRuleUtil.
                </Description>
            </Argument>
            <Argument name="identity" type="Identity">
                <Description>
                    The Identity object that represents the user needing the field value.
                </Description>
            </Argument>
            <Argument name="link" type="Link">
                <Description>
                    The sailpoint.object.Link that is being acted upon. If the link is not
                    applicable,
                    this value will be null.
                </Description>
            </Argument>
            <Argument name="group" type="ManagedAttribute">
                <Description>
                    The sailpoint.object.ManagedAttribute that is being acted upon. If the managed
                    attribute
                    is not applicable, the value will be null.
                </Description>
            </Argument>
            <Argument name="project" type="ProvisioningProject">
                <Description>
                    The provisioning project being acted upon. If a provisioning project is not
                    applicable,
                    the value will be null.
                </Description>
            </Argument>
            <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
                <Description>
                    The account request. If an account request is not applicable, the value will be
                    null.
                </Description>
            </Argument>
            <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
                <Description>
                    The object request. If an object request is not applicable, the value will be
                    null.
                </Description>
            </Argument>
            <Argument name="role" type="Bundle">
                <Description>
                    The role with the template we are compiling. If the role is
                    not applicable, the value will be null.
                </Description>
            </Argument>
            <Argument name="application" type="Application">
                <Description>
                    The sailpont.object.Application with the template we are compiling. If the
                    application
                    is not applicable, the value will be null.
                </Description>
            </Argument>
            <Argument name="template" type="Template">
                <Description>
                    The Template that contains this field.
                </Description>
            </Argument>
            <Argument name="field" type="Field">
                <Description>
                    The current field being computed.
                </Description>
            </Argument>
            <Argument name="current" type="Object">
                <Description>
                    The current value corresponding to the identity or account attribute that the
                    field represents.
                    If no current value is set, this value will be null.
                </Description>
            </Argument>
            <Argument name="operation" type="ProvisioningPlan.Operation">
                <Description>
                    The operation being performed.
                </Description>
            </Argument>
        </Inputs>
        <Returns>
            <Argument name="value">
                <Description>
                    The string value created.
                </Description>
            </Argument>
        </Returns>
    </Signature>
    <Source><![CDATA[
    import sailpoint.tools.GeneralException;
    import org.apache.commons.lang.StringUtils;
    import java.text.Normalizer;

    int MAX_USERNAME_LENGTH = 12;

    public String generateUsername(String firstName, String lastName) throws GeneralException {
        firstName = StringUtils.trimToNull(firstName);
        lastName = StringUtils.trimToNull(lastName);
        String otherName = identity.getStringAttribute("otherName");

        if(firstName != null) {
            firstName = (Normalizer.normalize(firstName, Normalizer.Form.NFD).replaceAll("\\p{InCombiningDiacriticalMarks}+", ""));
            firstName = firstName.replaceAll("[^a-zA-Z0-9]", "");
        }

        if(lastName != null) {
            lastName = (Normalizer.normalize(lastName, Normalizer.Form.NFD).replaceAll("\\p{InCombiningDiacriticalMarks}+", ""));
            lastName = lastName.replaceAll("[^a-zA-Z0-9]", "");
        }

        if(otherName != null) {
            otherName = (Normalizer.normalize(otherName, Normalizer.Form.NFD).replaceAll("\\p{InCombiningDiacriticalMarks}+", ""));
            otherName = otherName.replaceAll("[^a-zA-Z0-9]", "");
        }

        if((firstName == null) || (lastName == null)) {
            log.debug( "AD Create User Name | Exit from generateUsername method. No last name and first name for user" );
            return null;
        }

        if(!StringUtils.isEmpty(otherName)) {
            firstName = otherName;
        }

        String username = null;
        String fullName = firstName + "." + lastName;

        if(fullName.length() > MAX_USERNAME_LENGTH) {
            int firstNameLength = firstName.length();

            if(firstNameLength > (MAX_USERNAME_LENGTH - 2)) {
                for(int lastNameLength = 0; lastNameLength < lastName.length(); lastNameLength++) {
                    username = firstName.substring(0, (MAX_USERNAME_LENGTH - 2)) + "." + lastName.charAt(lastNameLength);
                    username = username.toLowerCase();
                    if (isUnique(username)) {
                        log.debug( "AD Create User Name | Unique username generated: " + username);
                        log.debug( "AD Create User Name | Exit from the  GenerateUsername Method" );
                        return username;
                    }
                }
            } else {
                for(int lastNameLength = 0; lastNameLength < lastName.length(); lastNameLength++) {
                    username = firstName + "." + lastName.charAt(lastNameLength);
                    username = username.toLowerCase();
                    if (isUnique(username)) {
                        log.debug( "AD Create User Name | Unique username generated: " + username);
                        log.debug( "AD Create User Name | Exit from the  GenerateUsername Method" );
                        return username;
                    }
                }
            }
        } else {
            username = fullName;
            username = username.toLowerCase();
            if (isUnique(username)) {
                log.debug( "AD Create User Name | Unique username generated: " + username);
                log.debug( "AD Create User Name | Exit from the  GenerateUsername Method" );
                return username;
            } else {
                for(int lastNameLength = 0; lastNameLength < lastName.length(); lastNameLength++) {
                    username = firstName + "." + lastName.charAt(lastNameLength);
                    username = username.toLowerCase();
                    if (isUnique(username)) {
                        log.debug( "AD Create User Name | Unique username generated: " + username);
                        log.debug( "AD Create User Name | Exit from the  GenerateUsername Method" );
                        return username;
                    }
                }
            }
        }



        return null;
    }

    public boolean isUnique(String username) throws GeneralException {
        //Assumes your schema Account Name/Display name is sAMAccountNAme
        return !idn.accountExistsByDisplayName(application.getName(), username);
    }

    return generateUsername(identity.getFirstname(), identity.getLastname());

  ]]></Source>
</Rule>